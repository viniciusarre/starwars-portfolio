'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var styles = {
  container: {
    width: '100%',
    height: '100%',
    background: '#000',
    overflow: 'hidden'
  },
  fade: {
    position: 'relative',
    width: '100%',
    minHeight: '60vh',
    top: '-25px',
    backgroundImage: 'linear-gradient(0deg, transparent, black 75%)',
    zIndex: 1
  },
  textContainer: {
    display: 'flex',
    justifyContent: 'center',
    position: 'relative',
    height: '800px',
    color: '#feda4a',
    fontFamily: "'Pathway Gothic One', sans-serif",
    fontSize: '500%',
    fontWeight: '600',
    letterSpacing: '6px',
    lineHeight: '150%',
    perspective: '400px',
    textAlign: 'justify'
  },
  crawl: {
    position: 'relative',
    top: '9999px',
    transformOrigin: '50% 100%',
    animation: 'crawl 60s linear'
  },
  title: {
    fontSize: '90%',
    textAlign: 'center'
  },
  subTitle: {
    margin: '0 0 100px',
    textTransform: 'uppercase'
  }
};

var Crawl = function (_Component) {
  _inherits(Crawl, _Component);

  function Crawl() {
    _classCallCheck(this, Crawl);

    return _possibleConstructorReturn(this, (Crawl.__proto__ || Object.getPrototypeOf(Crawl)).apply(this, arguments));
  }

  _createClass(Crawl, [{
    key: 'mergeStyles',
    value: function mergeStyles(defaultStyle, userStyle) {
      if (!userStyle) {
        return defaultStyle;
      }

      return Object.assign(defaultStyle, userStyle);
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          children = _props.children,
          containerStyles = _props.containerStyles,
          fadeStyles = _props.fadeStyles,
          textContainerStyles = _props.textContainerStyles,
          crawlStyles = _props.crawlStyles,
          titleStyles = _props.titleStyles,
          subTitleStyles = _props.subTitleStyles,
          textStyles = _props.textStyles,
          title = _props.title,
          subTitle = _props.subTitle,
          text = _props.text;


      return _react2.default.createElement(
        'div',
        { className: 'crawler', style: this.mergeStyles(styles.container, containerStyles) },
        _react2.default.createElement('div', { style: this.mergeStyles(styles.fade, fadeStyles) }),
        _react2.default.createElement(
          'section',
          { style: this.mergeStyles(styles.textContainer, textContainerStyles) },
          _react2.default.createElement(
            'div',
            { style: this.mergeStyles(styles.crawl, crawlStyles) },
            _react2.default.createElement(
              'div',
              { style: this.mergeStyles(styles.title, titleStyles) },
              _react2.default.createElement(
                'p',
                { className: 'title' },
                title
              ),
              _react2.default.createElement(
                'h1',
                { className: 'subTitle', style: this.mergeStyles(styles.subTitle, subTitleStyles) },
                subTitle
              )
            ),
            _react2.default.createElement(
              'p',
              { className: 'text', style: textStyles },
              text
            ),
            children
          )
        )
      );
    }
  }]);

  return Crawl;
}(_react.Component);

Crawl.PropTypes = {
  /**
   * Any nodes in addition to provided text
   */
  children: _propTypes2.default.node,
  /**
   * Override the inline-styles of the various elements.
   */
  containerStyles: _propTypes2.default.object,
  textContainerStyles: _propTypes2.default.object,
  crawlStyles: _propTypes2.default.object,
  titleStyles: _propTypes2.default.object,
  subTitleStyles: _propTypes2.default.object,
  textStyles: _propTypes2.default.object,
  /*
   * Texts
   */
  title: _propTypes2.default.string,
  subTitle: _propTypes2.default.string,
  text: _propTypes2.default.string
};

exports.default = Crawl;